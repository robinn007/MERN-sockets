{"version":3,"sources":["App.js","index.js"],"names":["getServerUrl","process","REACT_APP_SERVER_URL","window","location","hostname","includes","origin","replace","App","isAuthenticated","setIsAuthenticated","useState","messages","setMessages","message","setMessage","room","setRoom","socketID","setSocketId","roomName","setRoomName","connectionError","setConnectionError","socketRef","useRef","handleLogin","async","serverUrl","fetch","method","credentials","ok","initializeSocket","error","current","io","withCredentials","on","id","console","log","data","prevMessages","reason","useEffect","disconnect","_jsx","Container","maxWidth","children","_jsxs","Box","style","marginTop","Typography","variant","component","gutterBottom","Alert","severity","marginBottom","onSubmit","e","preventDefault","emit","TextField","value","onChange","target","label","size","marginRight","Button","type","color","map","m","i","Paper","padding","backgroundColor","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5112d5bd.chunk.js","sourcesContent":["\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  Typography,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport \"./App.css\";\r\n\r\n// Helper function to get server URL\r\nconst getServerUrl = () => {\r\n  if (process.env.REACT_APP_SERVER_URL) {\r\n    return process.env.REACT_APP_SERVER_URL;\r\n  }\r\n  \r\n  // For Codespaces, replace port 3000 with 5000\r\n  if (window.location.hostname.includes('app.github.dev')) {\r\n    return window.location.origin.replace('-3000.app.github.dev', '-5000.app.github.dev');\r\n  }\r\n  \r\n  // For local development\r\n  return 'http://localhost:5000' || 'https://mern-sockets.onrender.com/';\r\n};\r\n\r\nconst App = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [socketID, setSocketId] = useState(\"\");\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [connectionError, setConnectionError] = useState(\"\");\r\n  \r\n  const socketRef = useRef(null);\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const serverUrl = getServerUrl();\r\n      \r\n      const response = await fetch(`${serverUrl}/login`, {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setIsAuthenticated(true);\r\n        setConnectionError(\"\");\r\n        initializeSocket();\r\n      } else {\r\n        setConnectionError(\"Login failed\");\r\n      }\r\n    } catch (error) {\r\n      setConnectionError(\"Login failed: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const initializeSocket = () => {\r\n    if (socketRef.current) return;\r\n\r\n    const serverUrl = getServerUrl();\r\n\r\n    socketRef.current = io(serverUrl, {\r\n      withCredentials: true,\r\n    });\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      setSocketId(socketRef.current.id);\r\n      setConnectionError(\"\");\r\n      console.log(\"connected\", socketRef.current.id);\r\n    });\r\n\r\n    socketRef.current.on(\"receive-message\", (data) => {\r\n      console.log(\"Received message:\", data);\r\n      setMessages((prevMessages) => [...prevMessages, data]);\r\n    });\r\n\r\n    socketRef.current.on(\"connect_error\", (error) => {\r\n      setConnectionError(\"Connection failed: \" + error.message);\r\n      console.error(\"Connection error:\", error);\r\n    });\r\n\r\n    socketRef.current.on(\"disconnect\", (reason) => {\r\n      console.log(\"Disconnected:\", reason);\r\n      setSocketId(\"\");\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (socketRef.current && message && room) {\r\n      socketRef.current.emit(\"message\", { room, message });\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const joinRoomHandler = (e) => {\r\n    e.preventDefault();\r\n    if (socketRef.current && roomName) {\r\n      socketRef.current.emit(\"join-room\", roomName);\r\n      setRoomName(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box style={{ marginTop: 32 }}>\r\n          <Typography variant=\"h4\" component=\"div\" gutterBottom>\r\n            Socket.IO Chat\r\n          </Typography>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            Please login to access the chat\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={handleLogin}\r\n            style={{ marginTop: 16 }}\r\n          >\r\n            Login\r\n          </Button>\r\n          {connectionError && (\r\n            <Alert severity=\"error\" style={{ marginTop: 16 }}>\r\n              {connectionError}\r\n            </Alert>\r\n          )}\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Box style={{ marginTop: 16 }}>\r\n        <Typography variant=\"h4\" component=\"div\" gutterBottom>\r\n          Socket.IO Chat\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body2\" component=\"div\" gutterBottom>\r\n          Socket ID: {socketID}\r\n        </Typography>\r\n\r\n        {connectionError && (\r\n          <Alert severity=\"error\" style={{ marginBottom: 16 }}>\r\n            {connectionError}\r\n          </Alert>\r\n        )}\r\n\r\n        <Box component=\"form\" onSubmit={joinRoomHandler} style={{ marginBottom: 24 }}>\r\n          <Typography variant=\"h6\">Join Room</Typography>\r\n          <TextField\r\n            value={roomName}\r\n            onChange={(e) => setRoomName(e.target.value)}\r\n            label=\"Room Name\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ marginRight: 8 }}\r\n          />\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Join\r\n          </Button>\r\n        </Box>\r\n\r\n        <Box component=\"form\" onSubmit={handleSubmit} style={{ marginBottom: 24 }}>\r\n          <Typography variant=\"h6\">Send Message</Typography>\r\n          <TextField\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            label=\"Message\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ marginRight: 8, marginBottom: 8 }}\r\n          />\r\n          <TextField\r\n            value={room}\r\n            onChange={(e) => setRoom(e.target.value)}\r\n            label=\"Room\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ marginRight: 8, marginBottom: 8 }}\r\n          />\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Send\r\n          </Button>\r\n        </Box>\r\n\r\n        <Box>\r\n          <Typography variant=\"h6\">Messages:</Typography>\r\n          <Box style={{ marginTop: 8 }}>\r\n            {messages.map((m, i) => (\r\n              <Paper \r\n                key={i} \r\n                style={{ \r\n                  padding: 8, \r\n                  marginBottom: 8, \r\n                  backgroundColor: '#f5f5f5' \r\n                }}\r\n              >\r\n                <Typography variant=\"body1\" component=\"div\">\r\n                  {m}\r\n                </Typography>\r\n              </Paper>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}